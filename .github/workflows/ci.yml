name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.13
  POETRY_VERSION: 2.1.4

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests with pytest
        run: poetry run pytest --cov=book_lamp --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          fail_ci_if_error: true

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Lint with ruff
        run: poetry run ruff check .

      - name: Type checking with mypy
        run: poetry run mypy .

      - name: Security check with bandit
        run: poetry run bandit -r . -x ./.venv,./

  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            venv-${{ runner.os }}-

      - name: Install Python dependencies (runtime only)
        run: |
          poetry --version
          poetry install --no-interaction --no-ansi --only main

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Node dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          echo "=== Starting Playwright browser installation ==="

          # Check initial state
          echo "Initial state:"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Environment variables:"
          env | grep -E "(PLAYWRIGHT|PATH)" || echo "No Playwright env vars found"

          # Use GitHub Actions' built-in Playwright setup
          echo "Installing Chromium browser..."
          npx playwright install chromium

          # Verify installation
          echo "Verifying browser installation..."
          npx playwright --version

          # Check if chromium is properly installed
          echo "Checking installed browsers:"
          ls -la ~/.cache/ms-playwright/ || echo "No browsers found"

          # Check for both chromium variants that might be needed
          if ls ~/.cache/ms-playwright/chromium* >/dev/null 2>&1; then
            echo "✓ chromium found:"
            ls -la ~/.cache/ms-playwright/chromium*/
          else
            echo "✗ chromium not found"
          fi

          if ls ~/.cache/ms-playwright/chromium_headless_shell* >/dev/null 2>&1; then
            echo "✓ chromium-headless-shell found:"
            ls -la ~/.cache/ms-playwright/chromium_headless_shell*/
          else
            echo "ℹ chromium-headless-shell not found (may not be needed)"
          fi

          # Test if browser can actually launch
          echo "Testing browser launch..."
          npx playwright test --version || {
            echo "Browser test failed, trying to install system dependencies..."
            npx playwright install-deps chromium || echo "System deps installation failed"
            echo "Retrying browser test after installing deps..."
            npx playwright test --version || echo "Browser test still failed after installing deps"
          }

          echo "=== Browser installation complete ==="

      - name: Initialize test database
        env:
          TEST_MODE: 1
          FLASK_DEBUG: false
          FLASK_APP: book_lamp.app
          DB_URL: sqlite:///e2e_test.db
        run: |
          echo "=== Initializing test database ==="
          poetry run flask --app book_lamp.app init-db
          echo "=== Database initialized ==="

      - name: Run Playwright tests
        env:
          CI: true
          TEST_MODE: 1
          FLASK_DEBUG: false
          DB_URL: sqlite:///e2e_test.db
        run: |
          echo "=== Starting Playwright tests ==="
          echo "Current directory: $(pwd)"

          echo "Checking Python environment:"
          poetry run python --version
          poetry run flask --version || echo "Flask not found"

          echo "Checking Node environment:"
          node --version
          npm --version
          npx playwright --version

          echo "Checking if test files exist:"
          ls -la tests-e2e/ || echo "No tests-e2e directory found"

          echo "Checking Playwright config:"
          cat playwright.config.ts

          echo "Testing Flask app can be imported:"
          poetry run python -c "from book_lamp.app import app; print('Flask app imported successfully')" || echo "Failed to import Flask app"

          echo "Running tests..."
          npm test --reporter=list || {
            EXIT_CODE=$?
            echo "Tests failed with exit code: $EXIT_CODE"
            echo "Checking for any generated files:"
            ls -la playwright-report/ 2>/dev/null || echo "No playwright-report directory"
            ls -la test-results/ 2>/dev/null || echo "No test-results directory"
            exit $EXIT_CODE
          }
          echo "=== Tests completed ==="

      - name: Upload Playwright report
        if: always()
        run: |
          if [ -d "playwright-report" ] && [ "$(ls -A playwright-report)" ]; then
            echo "Uploading Playwright report..."
            # Create a simple index if it doesn't exist
            if [ ! -f "playwright-report/index.html" ]; then
              echo "<html><body><h1>No Playwright report available</h1><p>Tests may have failed before report generation.</p></body></html>" > playwright-report/index.html
            fi
          else
            echo "No Playwright report found, creating placeholder..."
            mkdir -p playwright-report
            echo "<html><body><h1>No Playwright report available</h1><p>Tests may have failed before report generation.</p></body></html>" > playwright-report/index.html
          fi
        continue-on-error: true

      - name: Upload Playwright report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Prepare test results
        if: always()
        run: |
          if [ -d "test-results" ] && [ "$(ls -A test-results)" ]; then
            echo "Test results found, preparing for upload..."
          else
            echo "No test results found, creating placeholder..."
            mkdir -p test-results
            echo "No test results available - tests may have failed before results were generated" > test-results/README.txt
          fi
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results
